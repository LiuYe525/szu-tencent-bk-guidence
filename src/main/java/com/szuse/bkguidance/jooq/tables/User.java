/*
 * This file is generated by jOOQ.
 */
package com.szuse.bkguidance.jooq.tables;

import com.szuse.bkguidance.jooq.Indexes;
import com.szuse.bkguidance.jooq.Keys;
import com.szuse.bkguidance.jooq.Public;
import com.szuse.bkguidance.jooq.tables.records.UserRecord;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class User extends TableImpl<UserRecord> {

  /** The reference instance of <code>public.user</code> */
  public static final User USER = new User();
  private static final long serialVersionUID = 1L;
  /** The column <code>public.user.id</code>. userId */
  public final TableField<UserRecord, Long> ID =
      createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "userId");
  /** The column <code>public.user.email</code>. email */
  public final TableField<UserRecord, String> EMAIL =
      createField(DSL.name("email"), SQLDataType.VARCHAR(255).nullable(false), this, "email");
  /** The column <code>public.user.username</code>. username */
  public final TableField<UserRecord, String> USERNAME =
      createField(DSL.name("username"), SQLDataType.VARCHAR(255), this, "username");
  /** The column <code>public.user.account</code>. account */
  public final TableField<UserRecord, String> ACCOUNT =
      createField(DSL.name("account"), SQLDataType.VARCHAR(255).nullable(false), this, "account");
  /** The column <code>public.user.password</code>. password */
  public final TableField<UserRecord, String> PASSWORD =
      createField(DSL.name("password"), SQLDataType.VARCHAR(255).nullable(false), this, "password");
  /** The column <code>public.user.avatar</code>. avatar */
  public final TableField<UserRecord, String> AVATAR =
      createField(DSL.name("avatar"), SQLDataType.VARCHAR(255), this, "avatar");
  /** The column <code>public.user.create_time</code>. create_time */
  public final TableField<UserRecord, LocalDate> CREATE_TIME =
      createField(DSL.name("create_time"), SQLDataType.LOCALDATE, this, "create_time");
  /** The column <code>public.user.update_time</code>. update_time */
  public final TableField<UserRecord, LocalDate> UPDATE_TIME =
      createField(DSL.name("update_time"), SQLDataType.LOCALDATE, this, "update_time");
  /** The column <code>public.user.deleted</code>. deleted */
  public final TableField<UserRecord, Boolean> DELETED =
      createField(DSL.name("deleted"), SQLDataType.BOOLEAN, this, "deleted");

  private User(Name alias, Table<UserRecord> aliased) {
    this(alias, aliased, null);
  }

  private User(Name alias, Table<UserRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /** Create an aliased <code>public.user</code> table reference */
  public User(String alias) {
    this(DSL.name(alias), USER);
  }

  /** Create an aliased <code>public.user</code> table reference */
  public User(Name alias) {
    this(alias, USER);
  }

  /** Create a <code>public.user</code> table reference */
  public User() {
    this(DSL.name("user"), null);
  }

  public <O extends Record> User(Table<O> child, ForeignKey<O, UserRecord> key) {
    super(child, key, USER);
  }

  /** The class holding records for this type */
  @Override
  public Class<UserRecord> getRecordType() {
    return UserRecord.class;
  }

  @Override
  public Schema getSchema() {
    return aliased() ? null : Public.PUBLIC;
  }

  @Override
  public List<Index> getIndexes() {
    return Arrays.asList(
        Indexes.LOGIN_SEARCH_ACCOUNT_IDX, Indexes.LOGIN_SEARCH_EMAIL_IDX, Indexes.UNIQUE_EMAIL_IDX);
  }

  @Override
  public UniqueKey<UserRecord> getPrimaryKey() {
    return Keys.USER_PKEY;
  }

  @Override
  public List<UniqueKey<UserRecord>> getUniqueKeys() {
    return Arrays.asList(Keys.USER_EMAIL_KEY);
  }

  @Override
  public User as(String alias) {
    return new User(DSL.name(alias), this);
  }

  @Override
  public User as(Name alias) {
    return new User(alias, this);
  }

  @Override
  public User as(Table<?> alias) {
    return new User(alias.getQualifiedName(), this);
  }

  /** Rename this table */
  @Override
  public User rename(String name) {
    return new User(DSL.name(name), null);
  }

  /** Rename this table */
  @Override
  public User rename(Name name) {
    return new User(name, null);
  }

  /** Rename this table */
  @Override
  public User rename(Table<?> name) {
    return new User(name.getQualifiedName(), null);
  }

  // -------------------------------------------------------------------------
  // Row9 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row9<Long, String, String, String, String, String, LocalDate, LocalDate, Boolean>
      fieldsRow() {
    return (Row9) super.fieldsRow();
  }

  /** Convenience mapping calling {@link SelectField#convertFrom(Function)}. */
  public <U> SelectField<U> mapping(
      Function9<
              ? super Long,
              ? super String,
              ? super String,
              ? super String,
              ? super String,
              ? super String,
              ? super LocalDate,
              ? super LocalDate,
              ? super Boolean,
              ? extends U>
          from) {
    return convertFrom(Records.mapping(from));
  }

  /** Convenience mapping calling {@link SelectField#convertFrom(Class, Function)}. */
  public <U> SelectField<U> mapping(
      Class<U> toType,
      Function9<
              ? super Long,
              ? super String,
              ? super String,
              ? super String,
              ? super String,
              ? super String,
              ? super LocalDate,
              ? super LocalDate,
              ? super Boolean,
              ? extends U>
          from) {
    return convertFrom(toType, Records.mapping(from));
  }
}
